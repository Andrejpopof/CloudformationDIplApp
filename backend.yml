AWSTemplateFormatVersion: '2010-09-09'
Description: Backend container for ECS Cluster

Resources:

  ApiTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
        Cpu: 256
        Memory: 512
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ContainerDefinitions:
          - Name: backend
            Image: 570360337377.dkr.ecr.us-west-2.amazonaws.com/backend:latest
            Environment:
              - Name: MONGODB_HOST
                Value: !ImportValue 'NLBDomainName'
              - Name: MONGODB_USER
                Value: admin
              - Name: MONGODB_PASSWORD
                Value: pass
              - Name: FLASK_ENV
                Value: production
              - Name: BACKEND_PORT
                Value: 8080
              - Name: MONGODB_PORT
                Value: 27017
              - Name: MONGODB_NAME
                Value: interns
              - Name: SCRIPT_NAME
                Value: /api 
            PortMappings:
              - ContainerPort: 8080
                Protocol: tcp
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: 'backend'
                awslogs-group: 'logsApp'

  Service:
    Type: AWS::ECS::Service
    DependsOn: ApiListenerRule
    Properties:
      TaskDefinition: !Ref ApiTaskDefinition
      Cluster: !ImportValue 'Cluster'
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue 'PublicSubnet1'
            - !ImportValue 'PublicSubnet2'
          SecurityGroups:
            - !ImportValue ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8080
          TargetGroupArn: !Ref  ApiTargetGroup


  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: apiTG
      VpcId: !ImportValue 'VPC'
      Protocol: 'HTTP'
      Port: '80'
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip


  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api'
      ListenerArn: !ImportValue 'Listener'
      Priority: 10

Outputs:
  FrontendEndpoint:
    Description: Backend endpoint
    Value: !Join ['',['http://', !ImportValue 'DomainName', '/api']]
    Export:
      Name: 'BackendEndpoint'